/**
 * @fileoverview Firestore Security Rules for EasyBusiness application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict company-based data isolation model. Each company's data 
 * (products, sales, orders, financial records) is stored under its own unique path.
 * User data is also stored under its own path, with `companyId` included in the document for authorization.
 *
 * Data Structure:
 * - /companies/{companyId}: Root collection for company profiles.
 * - /users/{userId}: Root collection for user profiles.
 * - /companies/{companyId}/products/{productId}: Products belonging to a company.
 * - /companies/{companyId}/sales/{saleId}: Sales records for a company.
 * - /companies/{companyId}/orders/{orderId}: Orders placed with a company.
 * - /companies/{companyId}/financialRecords/{financialRecordId}: Financial records for a company.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed for privacy.
 * - All write operations within a company's data tree require the user to be a member of that company.
 * - Read operations (get, list) follow the same company membership requirement.
 * - Data consistency is enforced by ensuring that the `companyId` within a document matches the `companyId` in the path.
 *
 * Denormalization for Authorization:
 * The `companyId` is denormalized (copied) into each document under the `/companies/{companyId}` path. 
 * This allows for efficient authorization checks without needing to perform additional `get()` operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to company documents based on user authentication.
     * @path /companies/{companyId}
     * @allow (get) User with any auth can fetch a company document.
     * @allow (create) A user can create a company document. The 'id' field in the document must match the 'companyId' in the path.
     * @allow (update) A user can update a company document if it exists.
     * @allow (delete) A user can delete a company document if it exists.
     * @deny (create) A user attempts to create a company document with a mismatched 'id' field.
     * @principle Enforces company-level data isolation and validates document ownership.
     */
    match /companies/{companyId} {
      // Anyone can read company profiles
      allow get: if true;
      // Only allow creating a company if the document id matches the companyId and they are signed in
      allow create: if isSignedIn() && request.resource.data.id == companyId;
      // Only allow updates and deletes if the document exists.
      allow update, delete: if isSignedIn() && resource != null;
      allow list: if false; // Listing companies is not allowed
    }

    /**
     * @description Allows access to user documents based on user ownership.
     * @path /users/{userId}
     * @allow (get) User with matching UID can fetch their own user document.
     * @allow (create) User with matching UID can create their own user document. The 'id' field in the document must match the 'userId' in the path.
     * @allow (update) User with matching UID can update their own user document if it exists.
     * @allow (delete) User with matching UID can delete their own user document if it exists.
     * @deny (create) User attempts to create a user document with a mismatched 'id' field.
     * @principle Enforces user-level data isolation and validates document ownership.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update, delete: if isExistingOwner(userId) && request.resource.data.id == userId;
      allow list: if false; // Listing users is not allowed
    }

    /**
     * @description Allows access to product documents within a company based on company membership.
     * @path /companies/{companyId}/products/{productId}
     * @allow (get) User belonging to the company can fetch a product document.
     * @allow (create) User belonging to the company can create a product document. The 'companyId' field in the document must match the 'companyId' in the path.
     * @allow (update) User belonging to the company can update a product document if it exists and the 'companyId' matches.
     * @allow (delete) User belonging to the company can delete a product document if it exists and the 'companyId' matches.
     * @deny (create) User attempts to create a product document with a mismatched 'companyId' field.
     * @principle Enforces company-level data isolation and validates document ownership.
     */
    match /companies/{companyId}/products/{productId} {
      allow get, list: if isCompanyMember(companyId);
      allow create: if isCompanyMember(companyId) && request.resource.data.companyId == companyId;
      allow update, delete: if isExistingCompanyMember(companyId) && resource.data.companyId == companyId;
    }

    /**
     * @description Allows access to sales documents within a company based on company membership.
     * @path /companies/{companyId}/sales/{saleId}
     * @allow (get) User belonging to the company can fetch a sale document.
     * @allow (create) User belonging to the company can create a sale document. The 'companyId' field in the document must match the 'companyId' in the path.
     * @allow (update) User belonging to the company can update a sale document if it exists and the 'companyId' matches.
     * @allow (delete) User belonging to the company can delete a sale document if it exists and the 'companyId' matches.
     * @deny (create) User attempts to create a sale document with a mismatched 'companyId' field.
     * @principle Enforces company-level data isolation and validates document ownership.
     */
    match /companies/{companyId}/sales/{saleId} {
      allow get, list: if isCompanyMember(companyId);
      allow create: if isCompanyMember(companyId) && request.resource.data.companyId == companyId;
      allow update, delete: if isExistingCompanyMember(companyId) && resource.data.companyId == companyId;
    }

    /**
     * @description Allows access to order documents within a company based on company membership.
     * @path /companies/{companyId}/orders/{orderId}
     * @allow (get) User belonging to the company can fetch an order document.
     * @allow (create) User belonging to the company can create an order document. The 'companyId' field in the document must match the 'companyId' in the path.
     * @allow (update) User belonging to the company can update an order document if it exists and the 'companyId' matches.
     * @allow (delete) User belonging to the company can delete an order document if it exists and the 'companyId' matches.
     * @deny (create) User attempts to create an order document with a mismatched 'companyId' field.
     * @principle Enforces company-level data isolation and validates document ownership.
     */
    match /companies/{companyId}/orders/{orderId} {
      allow get, list: if isCompanyMember(companyId);
      allow create: if isCompanyMember(companyId) && request.resource.data.companyId == companyId;
      allow update, delete: if isExistingCompanyMember(companyId) && resource.data.companyId == companyId;
    }

    /**
     * @description Allows access to financial record documents within a company based on company membership.
     * @path /companies/{companyId}/financialRecords/{financialRecordId}
     * @allow (get) User belonging to the company can fetch a financial record document.
     * @allow (create) User belonging to the company can create a financial record document. The 'companyId' field in the document must match the 'companyId' in the path.
     * @allow (update) User belonging to the company can update a financial record document if it exists and the 'companyId' matches.
     * @allow (delete) User belonging to the company can delete a financial record document if it exists and the 'companyId' matches.
     * @deny (create) User attempts to create a financial record document with a mismatched 'companyId' field.
     * @principle Enforces company-level data isolation and validates document ownership.
     */
    match /companies/{companyId}/financialRecords/{financialRecordId} {
      allow get, list: if isCompanyMember(companyId);
      allow create: if isCompanyMember(companyId) && request.resource.data.companyId == companyId;
      allow update, delete: if isExistingCompanyMember(companyId) && resource.data.companyId == companyId;
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document based on the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the document and the document exists.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is a member of the specified company.
     * @param {string} companyId The company ID to check against the user's company ID.
     * @return {boolean} True if the user is a member of the company, false otherwise.
     */
    function isCompanyMember(companyId) {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == companyId;
    }

    /**
     * @description Checks if the user is a member of the specified company and the document exists.
     * @param {string} companyId The company ID to check against the user's company ID.
     * @return {boolean} True if the user is a member of the company and the document exists, false otherwise.
     */
    function isExistingCompanyMember(companyId) {
      return isCompanyMember(companyId) && resource != null;
    }
  }
}