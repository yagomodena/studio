/**
 * @fileoverview Firestore Security Rules for EasyBusiness application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict company-based data isolation model.  Users can only access data associated with their company. User documents are also protected via ownership checks.
 *
 * Data Structure:
 * - /companies/{companyId}: Root collection for company data.
 * - /users/{userId}: Root collection for user data.
 * - /companies/{companyId}/products/{productId}: Products belonging to a company.
 * - /companies/{companyId}/sales/{saleId}: Sales records for a company.
 * - /companies/{companyId}/orders/{orderId}: Orders for a company.
 * - /companies/{companyId}/financialRecords/{financialRecordId}: Financial records for a company.
 * - /companies/{companyId}/customers/{customerId}: Customer records for a company.
 * - /companies/{companyId}/categories/{categoryId}: Category records for a company.
 *
 * Key Security Decisions:
 * - Access to company-owned data (products, sales, orders, financialRecords, customers, categories) is restricted to authenticated users who belong to that company. This is enforced by comparing `request.auth.uid` against the user's `companyId` and the document's `companyId` field.
 * - User documents are protected by ownership, meaning only the authenticated user can read/write their own document.
 * - Listing company documents is allowed only for authenticated users within that company.
 *
 * Denormalization for Authorization:
 * - The `companyId` field is present in all company-owned documents. This denormalization is CRUCIAL for efficient and secure rules. It allows us to avoid costly `get()` operations to retrieve the company ID from a parent document.  It is particularly important for list operations, which cannot use `get()`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to company documents.
     * @path /companies/{companyId}
     * @allow (get, list) if true
     * @allow (create) if request.resource.data.id == request.auth.uid
     * @allow (update, delete) if false
     * @deny (create) if request.resource.data.id != request.auth.uid
     * @principle Allows anyone to read company documents, but only the owner can create, update or delete
     */
    match /companies/{companyId} {
      allow get, list: if true;
      allow create: if request.resource.data.id == companyId;
      allow update, delete: if false; //Writes are not allowed for companies after creation.
    }

    /**
     * @description Allows access to user documents.
     * @path /users/{userId}
     * @allow (get, list) if isOwner(userId)
     * @allow (create) if isOwner(userId)
     * @allow (update, delete) if isExistingOwner(userId)
     * @deny (create) if !isOwner(userId)
     * @principle Enforces user-ownership for all access.
     */
    match /users/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows access to product documents within a company.
     * @path /companies/{companyId}/products/{productId}
     * @allow (get, list) if isCompanyMember(companyId)
     * @allow (create) if isCompanyMember(companyId)
     * @allow (update, delete) if isExistingCompanyMember(companyId)
     * @deny (create) if !isCompanyMember(companyId)
     * @principle Enforces company membership for all access.
     */
    match /companies/{companyId}/products/{productId} {
      allow get, list: if isCompanyMember(companyId);
      allow create: if isCompanyMember(companyId);
      allow update, delete: if isExistingCompanyMember(companyId);
    }

    /**
     * @description Allows access to sale documents within a company.
     * @path /companies/{companyId}/sales/{saleId}
     * @allow (get, list) if isCompanyMember(companyId)
     * @allow (create) if isCompanyMember(companyId)
     * @allow (update, delete) if isExistingCompanyMember(companyId)
     * @deny (create) if !isCompanyMember(companyId)
     * @principle Enforces company membership for all access.
     */
    match /companies/{companyId}/sales/{saleId} {
      allow get, list: if isCompanyMember(companyId);
      allow create: if isCompanyMember(companyId);
      allow update, delete: if isExistingCompanyMember(companyId);
    }

    /**
     * @description Allows access to order documents within a company.
     * @path /companies/{companyId}/orders/{orderId}
     * @allow (get, list) if isCompanyMember(companyId)
     * @allow (create) if isCompanyMember(companyId)
     * @allow (update, delete) if isExistingCompanyMember(companyId)
     * @deny (create) if !isCompanyMember(companyId)
     * @principle Enforces company membership for all access.
     */
    match /companies/{companyId}/orders/{orderId} {
      allow get, list: if isCompanyMember(companyId);
      allow create: if isCompanyMember(companyId);
      allow update, delete: if isExistingCompanyMember(companyId);
    }

    /**
     * @description Allows access to financial record documents within a company.
     * @path /companies/{companyId}/financialRecords/{financialRecordId}
     * @allow (get, list) if isCompanyMember(companyId)
     * @allow (create) if isCompanyMember(companyId)
     * @allow (update, delete) if isExistingCompanyMember(companyId)
     * @deny (create) if !isCompanyMember(companyId)
     * @principle Enforces company membership for all access.
     */
    match /companies/{companyId}/financialRecords/{financialRecordId} {
      allow get, list: if isCompanyMember(companyId);
      allow create: if isCompanyMember(companyId);
      allow update, delete: if isExistingCompanyMember(companyId);
    }

    /**
     * @description Allows access to customer documents within a company.
     * @path /companies/{companyId}/customers/{customerId}
     * @allow (get, list) if isCompanyMember(companyId)
     * @allow (create) if isCompanyMember(companyId)
     * @allow (update, delete) if isExistingCompanyMember(companyId)
     * @deny (create) if !isCompanyMember(companyId)
     * @principle Enforces company membership for all access.
     */
    match /companies/{companyId}/customers/{customerId} {
      allow get, list: if isCompanyMember(companyId);
      allow create: if isCompanyMember(companyId);
      allow update, delete: if isExistingCompanyMember(companyId);
    }

    /**
     * @description Allows access to category documents within a company.
     * @path /companies/{companyId}/categories/{categoryId}
     * @allow (get, list) if isCompanyMember(companyId)
     * @allow (create) if isCompanyMember(companyId)
     * @allow (update, delete) if isExistingCompanyMember(companyId)
     * @deny (create) if !isCompanyMember(companyId)
     * @principle Enforces company membership for all access.
     */
    match /companies/{companyId}/categories/{categoryId} {
      allow get, list: if isCompanyMember(companyId);
      allow create: if isCompanyMember(companyId);
      allow update, delete: if isExistingCompanyMember(companyId);
    }

    // --- Helper functions ---

    // Checks if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Checks if the user is the owner of the document.
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Checks if the user is the owner of the document and the document exists.
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    // Check if the user is a member of the company
    function isCompanyMember(companyId) {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == companyId;
    }

     // Check if the user is a member of the company for an existing document
    function isExistingCompanyMember(companyId) {
      return isCompanyMember(companyId) && resource != null;
    }
  }
}