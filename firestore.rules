/**
 * @file Firestore Security Rules for EasyBusiness
 * @description This ruleset enforces a strict company-based data isolation model, allowing users to only access data belonging to their company.
 *
 * Data Structure:
 * - /companies/{companyId}: Stores company profile information.
 * - /users/{userId}: Stores user profile information.
 * - /companies/{companyId}/products/{productId}: Stores product information for each company.
 * - /companies/{companyId}/sales/{saleId}: Stores sales data for each company.
 * - /companies/{companyId}/orders/{orderId}: Stores order data for each company.
 * - /companies/{companyId}/financialRecords/{financialRecordId}: Stores financial records for each company.
 *
 * Key Security Decisions:
 * - All data is segregated by `companyId`. Users can only access data associated with their `companyId`.
 * - User listing is generally disallowed for privacy reasons, except for the currently logged-in user.
 * - Denormalization: The `companyId` is denormalized onto all company-owned subcollections to avoid costly `get()` operations in the security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read access to company information but restricts write access.
     * @path /companies/{companyId}
     * @allow get, list: if true (Company information is considered public)
     * @allow create: if false (Companies are created via admin tools)
     * @deny update: if true (Company updates are restricted)
     * @deny delete: if true (Company deletion is restricted)
     * @principle Allows public read access to company profiles, restricts write access.
     */
    match /companies/{companyId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to user profiles to the owner.
     * @path /users/{userId}
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow list: if isSignedIn() && isOwner(userId);
     * @allow create: if isSignedIn() && isOwner(userId);
     * @allow update: if isSignedIn() && isOwner(userId);
     * @allow delete: if isSignedIn() && isExistingOwner(userId);
     * @principle Enforces strict user ownership.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && request.auth.uid == userId;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows company members to manage products within their company.
     * @path /companies/{companyId}/products/{productId}
     * @allow get, list: if isSignedIn() && isCompanyMember(companyId);
     * @allow create: if isSignedIn() && isCompanyMember(companyId);
     * @allow update: if isSignedIn() && isCompanyMember(companyId);
     * @allow delete: if isSignedIn() && isCompanyMember(companyId);
     * @principle Enforces company-based ownership for products.
     */
    match /companies/{companyId}/products/{productId} {
      allow get: if isSignedIn() && isCompanyMember(companyId);
      allow list: if isSignedIn() && isCompanyMember(companyId);
      allow create: if isSignedIn() && isCompanyMember(companyId);
      allow update: if isSignedIn() && isCompanyMember(companyId);
      allow delete: if isSignedIn() && isCompanyMember(companyId);
    }

    /**
     * @description Allows company members to manage sales data within their company.
     * @path /companies/{companyId}/sales/{saleId}
     * @allow get, list: if isSignedIn() && isCompanyMember(companyId);
     * @allow create: if isSignedIn() && isCompanyMember(companyId);
     * @allow update: if isSignedIn() && isCompanyMember(companyId);
     * @allow delete: if isSignedIn() && isCompanyMember(companyId);
     * @principle Enforces company-based ownership for sales data.
     */
    match /companies/{companyId}/sales/{saleId} {
      allow get: if isSignedIn() && isCompanyMember(companyId);
      allow list: if isSignedIn() && isCompanyMember(companyId);
      allow create: if isSignedIn() && isCompanyMember(companyId);
      allow update: if isSignedIn() && isCompanyMember(companyId);
      allow delete: if isSignedIn() && isCompanyMember(companyId);
    }

    /**
     * @description Allows company members to manage orders within their company.
     * @path /companies/{companyId}/orders/{orderId}
     * @allow get, list: if isSignedIn() && isCompanyMember(companyId);
     * @allow create: if isSignedIn() && isCompanyMember(companyId);
     * @allow update: if isSignedIn() && isCompanyMember(companyId);
     * @allow delete: if isSignedIn() && isCompanyMember(companyId);
     * @principle Enforces company-based ownership for orders.
     */
    match /companies/{companyId}/orders/{orderId} {
      allow get: if isSignedIn() && isCompanyMember(companyId);
      allow list: if isSignedIn() && isCompanyMember(companyId);
      allow create: if isSignedIn() && isCompanyMember(companyId);
      allow update: if isSignedIn() && isCompanyMember(companyId);
      allow delete: if isSignedIn() && isCompanyMember(companyId);
    }

    /**
     * @description Allows company members to manage financial records within their company.
     * @path /companies/{companyId}/financialRecords/{financialRecordId}
     * @allow get, list: if isSignedIn() && isCompanyMember(companyId);
     * @allow create: if isSignedIn() && isCompanyMember(companyId);
     * @allow update: if isSignedIn() && isCompanyMember(companyId);
     * @allow delete: if isSignedIn() && isCompanyMember(companyId);
     * @principle Enforces company-based ownership for financial records.
     */
    match /companies/{companyId}/financialRecords/{financialRecordId} {
      allow get: if isSignedIn() && isCompanyMember(companyId);
      allow list: if isSignedIn() && isCompanyMember(companyId);
      allow create: if isSignedIn() && isCompanyMember(companyId);
      allow update: if isSignedIn() && isCompanyMember(companyId);
      allow delete: if isSignedIn() && isCompanyMember(companyId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId);
  }

  function isCompanyMember(companyId) {
    return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == companyId;
  }

  function isExistingCompanyMember(companyId) {
      return isSignedIn() && isCompanyMember(companyId);
  }
}