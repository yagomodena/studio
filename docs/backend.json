{
  "entities": {
    "Company": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Company",
      "type": "object",
      "description": "Represents a company using the EasyBusiness system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the company."
        },
        "name": {
          "type": "string",
          "description": "Name of the company."
        },
        "plan": {
          "type": "string",
          "description": "Subscription plan of the company (e.g., Standard, Plus)."
        }
      },
      "required": [
        "id",
        "name",
        "plan"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the EasyBusiness system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "name": {
          "type": "string",
          "description": "Name of the user."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "companyId": {
          "type": "string",
          "description": "Reference to the Company this user belongs to. (Relationship: Company 1:N User)"
        },
        "permission": {
          "type": "string",
          "description": "Role/permission of the user within the company (e.g., admin, standard)."
        },
        "phone": {
          "type": "string",
          "description": "Phone number of the user."
        }
      },
      "required": [
        "id",
        "name",
        "email",
        "companyId",
        "permission",
        "phone"
      ]
    },
    "Product": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Product",
      "type": "object",
      "description": "Represents a product managed within the EasyBusiness system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the product."
        },
        "name": {
          "type": "string",
          "description": "Name of the product."
        },
        "quantity": {
          "type": "number",
          "description": "Quantity of the product in stock."
        },
        "price": {
          "type": "number",
          "description": "Price of the product."
        },
        "companyId": {
          "type": "string",
          "description": "Reference to the Company that owns this product. (Relationship: Company 1:N Product)"
        }
      },
      "required": [
        "id",
        "name",
        "quantity",
        "price",
        "companyId"
      ]
    },
    "Sale": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Sale",
      "type": "object",
      "description": "Represents a sale recorded within the EasyBusiness system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the sale."
        },
        "productIds": {
          "type": "array",
          "description": "References to Products included in this sale. (Relationship: Sale 1:N Product)",
          "items": {
            "type": "string"
          }
        },
        "totalValue": {
          "type": "number",
          "description": "Total value of the sale."
        },
        "customer": {
          "type": "string",
          "description": "Customer associated with the sale (can be a name or identifier)."
        },
        "status": {
          "type": "string",
          "description": "Status of the sale (e.g., pending, completed)."
        },
        "companyId": {
          "type": "string",
          "description": "Reference to the Company that recorded this sale. (Relationship: Company 1:N Sale)"
        }
      },
      "required": [
        "id",
        "productIds",
        "totalValue",
        "customer",
        "status",
        "companyId"
      ]
    },
    "Order": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Order",
      "type": "object",
      "description": "Represents a customer order within the EasyBusiness system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the order."
        },
        "productIds": {
          "type": "array",
          "description": "References to Products included in this order. (Relationship: Order 1:N Product)",
          "items": {
            "type": "string"
          }
        },
        "customer": {
          "type": "string",
          "description": "Customer who placed the order."
        },
        "status": {
          "type": "string",
          "description": "Status of the order (e.g., pending, processing, shipped)."
        },
        "companyId": {
          "type": "string",
          "description": "Reference to the Company that owns this order. (Relationship: Company 1:N Order)"
        }
      },
      "required": [
        "id",
        "productIds",
        "customer",
        "status",
        "companyId"
      ]
    },
    "FinancialRecord": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "FinancialRecord",
      "type": "object",
      "description": "Represents a financial record (income or expense) within the EasyBusiness system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the financial record."
        },
        "type": {
          "type": "string",
          "description": "Type of financial record (e.g., income, expense)."
        },
        "value": {
          "type": "number",
          "description": "Value of the financial record."
        },
        "description": {
          "type": "string",
          "description": "Description of the financial record."
        },
        "companyId": {
          "type": "string",
          "description": "Reference to the Company that owns this financial record. (Relationship: Company 1:N FinancialRecord)"
        }
      },
      "required": [
        "id",
        "type",
        "value",
        "description",
        "companyId"
      ]
    },
    "Customer": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Customer",
      "type": "object",
      "description": "Represents a customer of a company.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the customer."
        },
        "name": {
          "type": "string",
          "description": "Name of the customer."
        },
        "email": {
          "type": "string",
          "description": "Email address of the customer.",
          "format": "email"
        },
        "phone": {
          "type": "string",
          "description": "Phone number of the customer."
        },
        "companyId": {
          "type": "string",
          "description": "Reference to the Company this customer belongs to."
        },
        "totalSpent": {
          "type": "number",
          "description": "Total amount spent by the customer."
        }
      },
      "required": ["id", "name", "email", "companyId"]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/companies/{companyId}",
        "definition": {
          "entityName": "Company",
          "schema": {
            "$ref": "#/backend/entities/Company"
          },
          "description": "Stores company information. Root level collection.",
          "params": [
            {
              "name": "companyId",
              "description": "Unique identifier for the company."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user information. Includes companyId for authorization.",
          "params": [
            {
              "name": "userId",
              "description": "Unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/companies/{companyId}/products/{productId}",
        "definition": {
          "entityName": "Product",
          "schema": {
            "$ref": "#/backend/entities/Product"
          },
          "description": "Stores product information for a specific company. Includes denormalized 'companyId' for authorization independence.",
          "params": [
            {
              "name": "companyId",
              "description": "Unique identifier for the company."
            },
            {
              "name": "productId",
              "description": "Unique identifier for the product."
            }
          ]
        }
      },
      {
        "path": "/companies/{companyId}/sales/{saleId}",
        "definition": {
          "entityName": "Sale",
          "schema": {
            "$ref": "#/backend/entities/Sale"
          },
          "description": "Stores sales data for a specific company. Includes denormalized 'companyId' for authorization independence.",
          "params": [
            {
              "name": "companyId",
              "description": "Unique identifier for the company."
            },
            {
              "name": "saleId",
              "description": "Unique identifier for the sale."
            }
          ]
        }
      },
      {
        "path": "/companies/{companyId}/orders/{orderId}",
        "definition": {
          "entityName": "Order",
          "schema": {
            "$ref": "#/backend/entities/Order"
          },
          "description": "Stores order information for a specific company. Includes denormalized 'companyId' for authorization independence.",
          "params": [
            {
              "name": "companyId",
              "description": "Unique identifier for the company."
            },
            {
              "name": "orderId",
              "description": "Unique identifier for the order."
            }
          ]
        }
      },
      {
        "path": "/companies/{companyId}/financialRecords/{financialRecordId}",
        "definition": {
          "entityName": "FinancialRecord",
          "schema": {
            "$ref": "#/backend/entities/FinancialRecord"
          },
          "description": "Stores financial records for a specific company. Includes denormalized 'companyId' for authorization independence.",
          "params": [
            {
              "name": "companyId",
              "description": "Unique identifier for the company."
            },
            {
              "name": "financialRecordId",
              "description": "Unique identifier for the financial record."
            }
          ]
        }
      },
      {
        "path": "/companies/{companyId}/customers/{customerId}",
        "definition": {
          "entityName": "Customer",
          "schema": {
            "$ref": "#/backend/entities/Customer"
          },
          "description": "Stores customer information for a specific company.",
          "params": [
            {
              "name": "companyId",
              "description": "Unique identifier for the company."
            },
            {
              "name": "customerId",
              "description": "Unique identifier for the customer."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure data isolation between companies and efficient querying for company-specific data. It leverages path-based ownership for User data and segregation of data based on companyId. This approach avoids complex queries and ensures security rules are straightforward and performant. Denormalization is applied where needed to maintain authorization independence. Specifically, the `companyId` is included in every document belonging to a company, allowing for simple and robust rules based on `request.auth.uid` and the user's `companyId`. This ensures that list operations can be securely performed by filtering based on the `companyId`. The structure uses hierarchical paths for User-Owned Data (Company 1:N Entity). Each company has its own set of users, products, sales, orders and financial records."
  }
}
    