/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict company-based data isolation model.
 *
 * Data Structure:
 * - /companies/{companyId}: Stores company profiles.
 * - /users/{userId}: Stores user profiles, linked to a company via companyId.
 * - /companies/{companyId}/products/{productId}: Stores products, scoped to a company.
 * - /companies/{companyId}/sales/{saleId}: Stores sales, scoped to a company.
 * - /companies/{companyId}/orders/{orderId}: Stores orders, scoped to a company.
 * - /companies/{companyId}/financialRecords/{financialRecordId}: Stores financial records, scoped to a company.
 * - /companies/{companyId}/customers/{customerId}: Stores customers, scoped to a company.
 * - /companies/{companyId}/categories/{categoryId}: Stores product categories, scoped to a company.
 *
 * Key Security Decisions:
 * - Data is isolated at the company level. Users can only access data associated with their company.
 * - `companyId` is denormalized onto child documents (products, sales, etc.) to enable efficient and secure rules without complex queries.
 * - List operations are secured by filtering based on the `companyId`.
 * - User documents are secured with owner-only access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read and create access to company documents.
     * @path /companies/{companyId}
     * @allow (get, list): if true (Public read access)
     * @allow (create): if request.resource.data.id == companyId
     * @deny (update, delete): Always. Companies can't be updated or deleted.
     * @principle Allows public read access to company information, but restricts write access.
     */
    match /companies/{companyId} {
      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.id == companyId;
      allow update, delete: if false;
    }

    /**
     * @description Allows owner-only access to user documents.
     * @path /users/{userId}
     * @allow (get, list): if isOwner(userId)
     * @allow (create): if isOwner(userId)
     * @allow (update, delete): if isExistingOwner(userId)
     * @deny: if request.auth == null
     * @principle Enforces strict user-ownership for all data access and modifications.
     */
    match /users/{userId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update, delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows company-level access to product documents.
     * @path /companies/{companyId}/products/{productId}
     * @allow (get, list): if isCompanyMember(companyId)
     * @allow (create): if isCompanyMember(companyId) && request.resource.data.companyId == companyId
     * @allow (update, delete): if isCompanyMember(companyId) && isExistingCompanyDocument(companyId, resource.data.companyId)
     * @deny: if request.auth == null
     * @principle Enforces that only members of a company can access product data.
     */
    match /companies/{companyId}/products/{productId} {
      allow get, list: if isSignedIn() && isCompanyMember(companyId);
      allow create: if isSignedIn() && isCompanyMember(companyId) && request.resource.data.companyId == companyId;
      allow update, delete: if isSignedIn() && isCompanyMember(companyId) && isExistingCompanyDocument(companyId, resource.data.companyId);
    }

    /**
     * @description Allows company-level access to sales documents.
     * @path /companies/{companyId}/sales/{saleId}
     * @allow (get, list): if isCompanyMember(companyId)
     * @allow (create): if isCompanyMember(companyId) && request.resource.data.companyId == companyId
     * @allow (update, delete): if isCompanyMember(companyId) && isExistingCompanyDocument(companyId, resource.data.companyId)
     * @deny: if request.auth == null
     * @principle Enforces that only members of a company can access sales data.
     */
    match /companies/{companyId}/sales/{saleId} {
      allow get, list: if isSignedIn() && isCompanyMember(companyId);
      allow create: if isSignedIn() && isCompanyMember(companyId) && request.resource.data.companyId == companyId;
      allow update, delete: if isSignedIn() && isCompanyMember(companyId) && isExistingCompanyDocument(companyId, resource.data.companyId);
    }

    /**
     * @description Allows company-level access to order documents.
     * @path /companies/{companyId}/orders/{orderId}
     * @allow (get, list): if isCompanyMember(companyId)
     * @allow (create): if isCompanyMember(companyId) && request.resource.data.companyId == companyId
     * @allow (update, delete): if isCompanyMember(companyId) && isExistingCompanyDocument(companyId, resource.data.companyId)
     * @deny: if request.auth == null
     * @principle Enforces that only members of a company can access order data.
     */
    match /companies/{companyId}/orders/{orderId} {
      allow get, list: if isSignedIn() && isCompanyMember(companyId);
      allow create: if isSignedIn() && isCompanyMember(companyId) && request.resource.data.companyId == companyId;
      allow update, delete: if isSignedIn() && isCompanyMember(companyId) && isExistingCompanyDocument(companyId, resource.data.companyId);
    }

    /**
     * @description Allows company-level access to financial record documents.
     * @path /companies/{companyId}/financialRecords/{financialRecordId}
     * @allow (get, list): if isCompanyMember(companyId)
     * @allow (create): if isCompanyMember(companyId) && request.resource.data.companyId == companyId
     * @allow (update, delete): if isCompanyMember(companyId) && isExistingCompanyDocument(companyId, resource.data.companyId)
     * @deny: if request.auth == null
     * @principle Enforces that only members of a company can access financial record data.
     */
    match /companies/{companyId}/financialRecords/{financialRecordId} {
      allow get, list: if isSignedIn() && isCompanyMember(companyId);
      allow create: if isSignedIn() && isCompanyMember(companyId) && request.resource.data.companyId == companyId;
      allow update, delete: if isSignedIn() && isCompanyMember(companyId) && isExistingCompanyDocument(companyId, resource.data.companyId);
    }

    /**
     * @description Allows company-level access to customer documents.
     * @path /companies/{companyId}/customers/{customerId}
     * @allow (get, list): if isCompanyMember(companyId)
     * @allow (create): if isCompanyMember(companyId) && request.resource.data.companyId == companyId
     * @allow (update, delete): if isCompanyMember(companyId) && isExistingCompanyDocument(companyId, resource.data.companyId)
     * @deny: if request.auth == null
     * @principle Enforces that only members of a company can access customer data.
     */
    match /companies/{companyId}/customers/{customerId} {
      allow get, list: if isSignedIn() && isCompanyMember(companyId);
      allow create: if isSignedIn() && isCompanyMember(companyId) && request.resource.data.companyId == companyId;
      allow update, delete: if isSignedIn() && isCompanyMember(companyId) && isExistingCompanyDocument(companyId, resource.data.companyId);
    }

        /**
     * @description Allows company-level access to category documents.
     * @path /companies/{companyId}/categories/{categoryId}
     * @allow (get, list): if isCompanyMember(companyId)
     * @allow (create): if isCompanyMember(companyId) && request.resource.data.companyId == companyId
     * @allow (update, delete): if isCompanyMember(companyId) && isExistingCompanyDocument(companyId, resource.data.companyId)
     * @deny: if request.auth == null
     * @principle Enforces that only members of a company can access category data.
     */
    match /companies/{companyId}/categories/{categoryId} {
      allow get, list: if isSignedIn() && isCompanyMember(companyId);
      allow create: if isSignedIn() && isCompanyMember(companyId) && request.resource.data.companyId == companyId;
      allow update, delete: if isSignedIn() && isCompanyMember(companyId) && isExistingCompanyDocument(companyId, resource.data.companyId);
    }


    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isCompanyMember(companyId) {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == companyId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isExistingCompanyDocument(companyId, resourceCompanyId) {
        return resource != null && resourceCompanyId == companyId;
    }
  }
}